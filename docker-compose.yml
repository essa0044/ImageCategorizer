
services:
  frontend:
    build: ./frontend
    container_name: exam-frontend
    ports:
      - "3000:80" # Map Host Port 3000 to Container Port 80 (Nginx default)
    restart: unless-stopped
    depends_on:
      - backend # Wartet, bis Backend gestartet ist (optional, aber gut)
    networks:
      - exam-network

  backend:
    build: ./backend
    container_name: exam-backend
    ports:
      - "5001:5001" # Map Host Port 5001 to Container Port 5001 (Flask default)
    volumes:
      - ./backend:/app # Mount local backend code into container for development
      # Optional: Mount Upload-Verzeichnis, wenn Dateien persistiert werden sollen
      # - ./uploads:/app/uploads
    environment:
      # Umgebungsvariablen für Python (z.B. DB-Verbindung)
      # Können auch aus einer .env-Datei im Backend-Ordner geladen werden
      FLASK_APP: app.py
      FLASK_DEBUG: 1 # Im Development
      # DATABASE_URL: postgresql://user:password@db:5432/examdb
    restart: unless-stopped
    depends_on:
      - db # Backend startet erst, wenn DB bereit ist
    networks:
      - exam-network

  db:
    image: postgres:15-alpine # PostgreSQL als Datenbank
    container_name: exam-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db_init:/docker-entrypoint-initdb.d # Für Initialisierungs-SQL-Skripte
    environment:
      POSTGRES_DB: examdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password # Sicherere Methode für Passwörter verwenden! (Secrets)
    ports:
      - "5432:5432" # Nur für Debugging/externen Zugriff freigeben, sonst nicht nötig
    restart: unless-stopped
    networks:
      - exam-network

networks:
  exam-network:
    driver: bridge

volumes:
  postgres_data: # Named volume für persistente DB-Daten